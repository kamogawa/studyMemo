1. 데이터베이스 오브젝트와 DDL
  데이터베이스 오브젝트: 표 뷰 색인 같은 데이터베이스에서 다루는 것들들의 총칭, 그냥 오브젝트라고 해도 됨
    스키마오브젝트
      특정유저가 소유, 소유한유저의 스키마의 격납
      표, 뷰, 시퀀스, 색인, 시노님 등
      스키마 오브젝트의 DDL
        [CREATE, ALTER, DROP (TRUNCATE)<-표에서만] [TABLE, VIEW, SEQUENCE, INDEX, SYNONYM] 
        자신의 스키마이어도 DDL실행시에는 권한이 필요함
        DDL이 실행되면 자동적으로 트렌젝션이 확정됨
    비스키마 오브젝트
      특정유저에 소유되지 않음, 스키마에 격납 안됨
      예) 유저, 롤, 표영역, 디렉토리 오브젝트 등
  오브젝트의 명명규칙
    길이: 12cR1이전 30바이트 이하, 12cR2이후 128바이트 이하
    최초문자는 알파벳 지정필요 ""로 다른 문자도 지정가능 함
    예약어 사용불가
    대소문자 구별안됨, 필요시 ""로 구별가능
    같은 유저가 소유한 다른 오브젝트 명과 같아서는 안됨, 표와 뷰가 같은 이름 지정불가
      예외) 색인, 제약, 트리거(이벤트 발생시 실행되는 pl/sql)
    같은 표에 다른 열과 중복되는 열명은 사용불가
    영숫자 $#_ 이외의 특수문자 사용시 ""를 사용
    
2. 디폴트값 설정: 의도하지 않은 null지정을 방지
    리테럴, 수식과 함수 설정 가능하나 디폴트값을 설정한 열만 지정가능
    데폴트값과 데이터 형이 일치해야함
    CREATE TABLE t1 ( userid number DEFAULT 1 );
    
3. 제약
  제약: 표의 열에 설정한 룰, 룰을 위반한 데이터의 격납을 금지함으로서 데이터의 정합성을 유지함
  
  제약구문: [CONSTRAINT 제약명] 제약종류, 제약명을 생략하면 SYS_C<슷자>의 이름으로 지정됨
    열레벨(표내지정): userid number (DEFAULT 값) 제약구문
                  not null은 열레벨로만 가능 표레벨 방법으로 지정불가, 나머지는 모두 사용가능
    표레벨(표외지정): 열지정 후 밑에 컴마 구분으로 제약구문 지정
                  복수의 열 지정시 표레벨 설정방법을 사용할 필요가 있음
  제약상세: 
    NOT NULL 제약 / [CONSTRAINT 제약명] NOT NULL : null설정, 변경을 금지, 반드시 설정 되야함
      
    CHECK 제약: (1개 또는 복수의 열조합) 조건에 충족되지 못한 값을 설정 금지
      체크제약에 지정 가능한 조건은 select문의 where구에 지정 가능한 조건과 같다.
      조건에 열명을 지정하면, 변경후의 값을 사용하서 조건이 평가됨
      제약의 지정방법에 따라 조건에 지정가능한 열이 다르기 때문에 주의
        열레벨: 그열만 지정가능 CHECK(열1 >= 100 AND 열1 <=200)
        표레벨: 복수의 열 지정가능 CHECK(열1 < 열2)
    
    유니크(一意)제약 / [CONSTRAINT 제약명] UNIQUE (복수 설정시 열명1[, 열명2]) : (1개 또는 복수의 열조합) 중복값 설정 금지
      유니크키: 표의 해당열이 유니크한 값을 갖는 키, 유니크키를 설정한 열은 유니크 제약을 설정한다.
      유니크제약과 주키제약 차이: 1개의 표에 복수 유니크키 설정 가능, null 설정가능(null은 중복설정 가능)
      주키제약과 마찬가지로 유니크제약을 설정하면 자동적으로 색인이 생성된다.
      NOT NULL 제약을 동시에 설정 가능
    
    주키제약 / [CONSTRAINT 제약명] NOT NULL (복수 설정시 열명1[, 열명2]):
      (1개 또는 복수의 열조합) 중복과 null 설정금지(값설정을 강제함) 1개의 표에 1개의 주키제약만 설정가능
      키: 행을 식별하기 위한 역할을 갖는 열 또는 열의 조합
      주키: 1건의 행을 특정 하기 위해 사용하는 열, 원칙적으로 모든 표에는 주키를 설정해야 한다.
      주키제약을 설정하면 자동으로 색인이 작성됨
        주키제약을 설정하고 싶은 열에 이미 색인이 작성되어있는 경우 "USING INDEX <색인명>"을 지정하면 작성된 색인을 재이용 가능하다.
        USING INDEX <CREATE INDEX문>을 지정하면 색인의 속정을 지정가능하다.
      복합주키: 복수의 열을 사용한 주키, 표레벨로 지정함
      
    외부키제약(참조정합성제약): (1개 또는 복수의 열조합) 관련된 표의 주키 또는 유니크키의 열과 일치하는 것을 보증
                         부모표의 참조키에 없는 데이터를 자식표의 외부키에 등록하는 것을 금지
                         null을 설정할수 있음, not null 제약 추가 설정 가능
      외부키: 결합과 관련된 키, 특정표의 값(부모표)으로 다른표(자식표)의 데이터를 연결(부자관계)짓는다.
      참조키: 부모표의 참조하는 열, 유니크제약이나 주키제약이 설정되있을 필요가 있음
      외부키제약은 참조키에 정의된 유니크제약, 주키제약에 의존함
      열레벨:
        [CONSTRAINT 제약명] REFERENCES 부모표명 (복수 설정시 참조키 열명1[, 열명2]) [ON DELETE {CASCADE | SET NULL}]
      표레벨 
        [CONSTRAINT 제약명] FOREIGN KEY (외부키 열명1[, 외부키열명2])
        REFERENCES 부모표명 (참조키 열명1[, 열명2]) [ON DELETE {CASCADE | SET NULL}]
      데폴트 설정으로는 자식표로부터 참되되고 있는 부모표의 참조키의 값은 변경, 삭제가 불가능하게 됨, 참조되고 있지 않은 값은 변경 삭제 가능
      ON DELETE 옵션 지정시 자식표에서 참조 되고있는 부모표의 행 삭제가 가능하게 됨
        ON DELETE CASCADE: 삭제 된 행을 참조하고 있는 자식표도 함께 삭제
        ON DELETE SET NULL: 삭제 된 행을 참조하고 있는 자식표에 외부키가 null이 설정됨
      자기참조외부키제약: 같은 표참조 가능, 표의 행의 상하관계를 갖게됨, 부모가 되는 열에 없는 값은 
    
  제약의 추가: ALTER TABLE <표명> ADD <제약>;
    제약은 표레벨제약의 지정방법을 사용하는 구문을 사용
  제약의 무효  
    제약을 무효화 하면 대량 데이터 로드시 체크동작이 없기 때문에 부하가 경감됨, 정합성을 잃을 리스크가 있음
    무효화: ALTER TABLE <표명> DISABLE CONSTRANIT <제약명> [CASCADE];
      무효화되는 제약이 의존하고 있는 열의 제약이 있는 경우 CASCADE를 지정하여, 의존하고 있는 다른 제약도 함께 무효화할 필요가 있음 
    무효화 해지: ALTER TABLE <표명> ENABLE CONSTRANIT <제약명>;
      무효화 해지시 제약을 위반하는 데이터가 존재할 경우 에러
      외부키제약이 의존하고 있는 주키제약, 유니크제약을 무효화 하는 경우, CASECADE를 지정할 필요가 있음, 외부키 제약도 함께 무효화됨, 
      하지만 무효화 해지시 1개씩 유효화를 실행해 줘야함
      
4. ALTER TABLE
  테이블 정의 변화 할수 있다.
  열추가: ALTER TABLE t1 ADD (col1 number [DEFALT 1] [제약] [, 열정의2]);
    열정의에는 (열명, 데이터형, 데폴트, 제약 등);이 지정가능 하다.
    추가한 열의 순서는 가장 끝이 됨 
    데폴트 값을 설정 안한경우, 이미 격납된 열에는 null이 설정됨
    추가열에 not null제약을 설정한 경우 데폴트값을 설정할 필요가 있음
    
  열변경: ALTER TABLE t1 MODIFY (col1 [number] [DEFALT 1] [null | not null] [, 열정의2]);
    데이터 형, 데폴트 값, not null제약 등의 추가 삭제가 가능
    열변경시 제한사항: 
      표에 행데이터가 있는 상태에서 데이터를 변경하는 경우, 원칙적으로 변경대상의 열의 모든행이 null일 필요가 있음(이하 예외 있음)
        DATE형을 TIMESTAMP또는 TIMESTAMP WITH LOCAL TIME ZONE으로 변경
        TIMESTAMP형 또는 TIMESTAMP WITH LOCAL TIME ZONE형을 DATE형으로 변경
     표에 행데이터가 있는 상태로 열의 데이터형의 데이터 사이즈를 변경할 경우 데이터사이즈를 크게 변경하는 것만 가능함
     
  열삭제: ALTER TABLE t1 DROUP COLUMN [ CASCADE CONSTRAINS ];
    (복수열): ALTER TABLE t1 DROUP ( col1, col2 ) [ CASCADE CONSTRAINS ];
    외부키 제약에 의해 참조된 열을 삭제할 경우,   [ CASCADE CONSTRAINS ]를 지정할 필요가 있음
    삭제된 열은 원상태로 되돌릴수 없음, 모든열을 삭제할수 없음 표에 1개의 열은 존재해야함
    데이터양이 많으면 속도가 느림, 열을 미사용으로 전환하여 삭제하면 회피 가능
    
  열의 미사용화: ALTER TABLE t1 SET UNUSED COLUMN 열명 [ CASCADE CONSTRAINS ] [ONLINE];
    (복수열)ALTER TABLE t1 SET UNUSED (col1, col2) [ CASCADE CONSTRAINS ];
    스토리지 영역을 개방: ALTER TABLE t1 DROP UNUSED COLUMS;
    SET UNUSED를 사용하여 기존의 열을 미사용화 하여 DROP구에 의한 삭제시 처리속도 향상
    외부키 제약에 의해 참조 되고있는 열을 미사용화 할 경우 [ CASCADE CONSTRAINS ] 을 지정장 필요가 있음
    [ONLINE]을 지정하면 열을 미사용화 하는 동안에도 dml을 실행가능   
    사용시 주의사항
      미사용 열의 값에는 악세스 불가능, 
      미사용화 한 열명 밑 형은 DESCRIBE 커맨드로는 표시 되지 않는다.
      미사용화 한 열을 되돌리는 것은 불가능함
      미사용화 한 열명과 같은 열명을 추가 가능함
      
  읽기전용 모드: ALTER TABLE t1 READ ONLY;
  (읽고 쓰기로 되돌경우)ALTER TABLE t1 READ WRITE;
    dml에 의한 변경, TRUNCATE TABLE에 의한 삭제 select for update 가 사용불가능 함
  
  표의 이동: ALTER TABLE t1 MOVE TABLESPACE <표영역명>;
    표의 이동중에 dml이 실행될 경우 완료 될때까지 대기됨
    표에 설정되 색인은 UNUSABLE 로 되버리기 때문에 재구축 할 필요가 있음
    
  표명 변경: ALTER TABLE t1 RENAME TO t2;
    변경전 표에 대한 조작을 허가하는 오브젝트권한이 있는 경우 변경된 표에도 이어짐
    
5. 표의 삭제와 버림
  표삭제: DROP TABLE t1 [ CASCADE CONSTRAINS ] [PURGE];
    삭제하는 표가 다른 표의 외부키제약에 참조되고 있는 경우, CASCADE CONSTRAINS를 지정할 필요가 있음
    PURGE를 지정하면 표를 휴지통에 넣지 않고 바로 완전삭제 됨, 안하면 휴지통으로 이동함
    
  휴지통: 표를 삭제하면 휴지통에 넣게됨(색인 제약 트리거도 함께)
    삭제된 표를 복원하기 위해 "플래쉬백드롭" 이라는 기능이 있음, 색인이나 제약 트리거도 함께 복원됨
    "삭제됨"이라는 마크가 붙여진것과 같음, 삭제됨 후에도 원래의 표가 격닙된 표영역에 격납되어 있음
    복원: FLASHBACK TABLE t1 TO BEFORE DROP;
      플레쉬백 테크놀로지: 과거 데이터의 참조나 복원이 가능한 기술
      보통표: 아래오 구분할경우 보통의 표를 힙구성표라고도 함
      색인구성표: 색인과 표를 합성한 구조를 한 표 
      표클러스터: 특정 키로 관련지어진 복수의 표를 1개의 세그먼트에 모아서 격납한 것
      
  표의 버림: 격납된 모든 데이터를 삭제, DDL로 구분됨
    TRUNCATE TABLE 표명 [  [ DROP [ALL] | REUSE ] STORAGE ] [ CASCADE ];
    DELETE문 보다 고속으로 행을 삭제함
    DROP STORAGE 를 설정하면 표작성후 추가로 할당된 스토레지 영역을 해방함, STORAGE구 미설정시 데폴트 값
    DROP ALL STORAGE 할당된 모든 스토리지영역 해방
    REUSE STORAGE 할당된 스토리지영역을 해방하지 않고 유지
    CASCADE 설정시 ON DELETE CASCADE 의 외부키제한이 설정된 자식표도 삭제 처리를 실행한다.
    
    주의점 
      DDL이기 때문에 롤백이나 플래쉬백 기능 대상외, 복원이 불가능함
      DELETE 문처럼 where 조건으로 삭제대상을 지정하는 것이 불가능함
6. CREATE TABLE AS SELECT
  질의 결과를 토대로 표를 작성하여 표의 이행가능, 데이터를 포함하여 표를 복사할때 편리
  
    열명을 지정 안함
      CREATE TABLE t1 AS SELECT t2_col1, t2_col2 FROM t2 [WHERE ...];
    열명을 지정
      CREATE TABLE t1 (t1_col1, t1_col2) AS SELECT t2_col1, t2_col2 FROM t2 [WHERE ...];

    열명을 지정 안한경우 select문의 실행결과의 열명으로 정의됨
    열명을 지정한 경우 작성하는 표의 열명과 select문의 열명 수가 일치해야함
    데이터 형, 사이즈, not null 제약이 새로운 표에 복사됨
    where구를 지정하지 않으면 모든 행이 새로운 표에 저장됨
    표의 정의만 복사하고 싶을 경우 where구의 조건을 무효 false가 되는 조건을 지정하면 됨
    
7. 일시표: 데이터를 일시적으로 보관하기 위한 표, 저장한 데이터는 실행된 세션에서면 참조가능하고, 사용종료되면 자동적으로 삭제됨
  이점: 보통표에서 사용했던 기능 사용가능
    데이터를 프라이베이트하게 사용 가능, 다른 세션에서 참조하지 않음
    복수의 세션에서 동시 이용 가능, 복수 세션이 동시에 일시표에 데이터를 삽입하는 경우 데이터는 세션별로 독립되어 사용되며 다른세션의 값이 혼재되지 않는다.
    REDO생성량을 줄여 부하를 줄이는 것이 가능하다. 일시표영역에서는 REDO가 생성되지 않는다.
    REDO데이터는 커밋 한 트렌젝션이 잃어버지 않도록 영속화되는 방법이다.
    
  종류
    글로벌 일시표: 일시표의 정의정보는 데이터 딕셔너리에 영속화 됨, 데이터베이스 전체에서 공통적으로 적용됨
      CREATE GLOBAL TEMPORARY TABLE t1
      [(col1 number, col2 date)]
      ON COMMIT { DELETE 트렌젝션종료시 데이터 삭제 | PRESERVE 세션종료시 데이터 삭제 } ROWS
      [AS SELECT ...]
      
    프라이베이트 일시표: 
        영속화 되지않음, 프라이베이트 일시표를 사용할때마다 일시표를 작성할 필요가 있음
        사용종료하면 자동적으로 삭제됨
        세션별로 독립되어있기 때문에 세션별로 같은 이름의 프라이베트 일시표를 작성할수 있다.
      CREATE PRIVATE TEMPORARY TABLE ORA$PTT_t1  //<-ORA$PTT로 표명이 시작해야됨
      [(col1 number, col2 date)]
      ON COMMIT { DELETE 트렌젝션종료시 데이터, 정의 삭제 | PRESERVE 세션종료시 데이터, 정의 삭제 } DEFINITION
      [AS SELECT ...]
  
  보통표와의 차이
    거의 같음, 색인이나 TRUNCATE도 실행 가능함 
    일시표는 일시표영역에 격납됨, 일시데이터를 위한 특수한 표영역
    항상 최초의 데이터를 INSERT할때 세그먼트가 할당됨
    TRUNCATE이외의 DDL은 일시표를 사용하고 있을때 실행 가능
    
8. 외부표
  외부파일(csv)을 오라클 데이터베이스 표처럼 사용하는 방법
  데이터 자체는 오라클 db에는 존재하지 않음, 외부 파일을 표로 만든 뷰
  일기전용 데이터, 갱신처리, 색인 작성 불가
  
  외부표에 접근 방법
    CREATE TABLE t1 (col1 number, col2 date)
    ORGANIZATION EXTERNAL (
      TYPE [ ORACLE_LOADER | ORACLE_DATADUMP ]
      DEFAULT DIRECTORY dir
      ACCESS PARAMETERS ( fields terminated by ',') <- ORACLE_LOADER에서만 지정 csv설정시 예
      LOCATION ('data.csv')
    )
    ORACLE_LOADER: TYPE을 생략하면 데폴트로 사용됨
      os파일 시스템을 오라클 db에 로드하는 툴, csv등 형식의 데이터 대응
    
    ORACLE_DATADUMP: 오라클 10g부터 도입, db의 데이터를 임포트(로드) 익스포트(언로드) 하는 툴
      외부표 작성 언로드 -> 로드용 외부표를 작성하여 로드
      데이터베이스간 데이터 이동이나, 현재 데이터를 보관(논리 백업)등에 활용
      expdp커맨드로 익스포트 하여 생성된 덤프파일은 외부표에서 로드 불가능함, ORACLE_DATADUMP악세스 드라이버로 언로드 한 덤프파일만 로드 가능
    
      
  
    
